library(raster)
library(rgdal)
library(tidyverse)
preston_crime <- readRDS("data/pcrime-spatstat.rds")
library(raster)
library(rgdal)
library(tidyverse)
preston_crime <- readRDS("data/pcrime-spatstat.rds")
preston_osm <- readRDS("data/osm_preston_gray.rds")
class(preston_osm) # raster
class(preston_crime) # ppp (spatial point pattern)
# Get some summary information on the dataset
preston_crime_df <- as.data.frame(readRDS("data/pcrime-spatstat.rds"))
summary(preston_crime_df)
# Get some summary information on the dataset
preston_crime_df <- as.data.frame(readRDS("data/pcrime-spatstat.rds"))
# Define a function to create a map
preston_map <- function(cols = c("green","red"), cex = c(0.5, 1), pch = c(1, 1)) {
plotRGB(preston_osm) # loaded above
plot(preston_crime, cols = cols, pch = pch, cex = cex, add = TRUE, show.window = TRUE)
}
preston_map()
# Get a table of marks
table(marks(preston_crime))
# Load the spatstat package
library(spatstat)
# Load the spatstat package
install.packages(spatstat)
# Load the spatstat package
install.packages("spatstat")
library(spatstat)
# Get a table of marks
table(marks(preston_crime))
# Get some summary information on the dataset
preston_crime_df <- as.data.frame(readRDS("data/pcrime-spatstat.rds"))
# Get some summary information on the dataset
summary(preston_crime)
# Get some summary information on the dataset
summary(preston_crime)
# Get a table of marks
table(marks(preston_crime))
# I do it with tidyverse as well
preston_crime_df <- as.data.frame(readRDS("data/pcrime-spatstat.rds"))
preston_crime_df %>% group_by(marks) %>% summarise(
count = n()
)
# Define a function to create a map
preston_map <- function(cols = c("green","red"), cex = c(0.5, 1), pch = c(1, 1)) {
plotRGB(preston_osm) # loaded above
plot(preston_crime, cols = cols, pch = pch, cex = cex, add = TRUE, show.window = TRUE)
}
preston_map()
plotRGB(preston_osm) # This is just the map of Preston
plotRGB(preston_osm) # This is just the map of Preston
plot(preston_crime)
plotRGB(preston_osm) # This is just the map of Preston
plot(preston_crime)
# Define a function to create a map
preston_map <- function(cols = c("green","red"), cex = c(0.5, 1), pch = c(1, 1)) {
plotRGB(preston_osm) # loaded above
plot(preston_crime, cols = cols, pch = pch, cex = cex, add = TRUE, show.window = TRUE)
}
preston_map()
# Draw the map with colors, sizes and plot c(1, 1)haracter
preston_map(
cols = c("green", "red"),
cex = c(0.5, 1),
pch = c(1, 1)
)
# Draw the map with colors, sizes and plot c(1, 1)haracter
preston_map(
cols = c("blue", "red"),
cex = c(0.5, 1),
pch = c(1, 1)
)
summary(preston_crime)
# Draw the map with colors, sizes and plot c(1, 1)haracter
preston_map(
cols = c("blue", "red"),
cex = c(0.2, 1),
pch = c(1, 1)
)
# Draw the map with colors, sizes and plot c(1, 1)haracter
preston_map(
cols = c("blue", "red"),
cex = c(1, 1),
pch = c(1, 1)
)
# Draw the map with colors, sizes and plot c(1, 1)haracter
preston_map(
cols = c("blue", "red"),
cex = c(0.5, 2),
pch = c(1, 1)
)
# Draw the map with colors, sizes and plot c(1, 1)haracter
preston_map(
cols = c("blue", "red"),
cex = c(0.5, 0.5),
pch = c(1, 1)
)
# Draw the map with colors, sizes and plot c(1, 1)haracter
preston_map(
cols = c("blue", "red"),
cex = c(1, 1),
pch = c(1, 1)
)
# Draw the map with colors, sizes and plot c(1, 1)haracter
preston_map(
cols = c("blue", "red"),
cex = c(1, 1),
pch = c(2, 1)
)
# Draw the map with colors, sizes and plot c(1, 1)haracter
preston_map(
cols = c("blue", "red"),
cex = c(1, 1),
pch = c(3, 1)
)
# Draw the map with colors, sizes and plot c(1, 1)haracter
preston_map(
cols = c("blue", "red"),
cex = c(1, 1),
pch = c(1, 1)
)
# Draw the map with colors, sizes and plot c(1, 1)haracter
preston_map(
cols = c("blue", "red"),
cex = c(0.8, 0.8),
pch = c(1, 1)
)
# preston_crime has been pre-defined
preston_crime
# Use the split function to show the two point patterns
crime_splits <- split(preston_crime)
crime_splits
# Plot the split crime
plot(crime_splits)
# Compute the densities of both sets of points
crime_densities <- density(crime_splits)
crime_densities
View(crime_densities)
crime_densities[["Violent crime"]]
crime_densities[[2]]
crime_densities[[1]]
# Calc the violent density divided by the sum of both
frac_violent_crime_density <- crime_densities[[2]] /
(crime_densities[[1]] + crime_densities[[2]])
crime_densities[[1]]
crime_densities[[2]]
# Get some summary information on the dataset
summary(preston_crime)
# Compute the densities of both sets of points
crime_densities <- density(crime_splits)
crime_densities
View(crime_densities)
View(crime_splits)
crime_splits[["Violent crime"]]
crime_densities[[1]]
crime_densities[[2]]
# Calc the violent density divided by the sum of both
frac_violent_crime_density <- crime_densities[[2]] /
(crime_densities[[1]] + crime_densities[[2]])
# Plot the density of the fraction of violent crime
plot(frac_violent_crime_density)
# Calc the violent density divided by the sum of both
frac_violent_crime_density <- crime_densities[[2]] /
(crime_densities[[2]] + crime_densities[[2]])
# Plot the density of the fraction of violent crime
plot(frac_violent_crime_density)
# Calc the violent density divided by the sum of both
frac_violent_crime_density <- crime_densities[[2]] /
(crime_densities[[1]] + crime_densities[[2]])
# Plot the density of the fraction of violent crime
plot(frac_violent_crime_density)
("becarioprecario/spatialkernel")
# Install spatialkernel (the CRAN version is outdated, so you need to grab the most recent maintained version from Github). You may need to install.packages("devtools") and then run:
devtools::install_github("becarioprecario/spatialkernel")
# Libraries
library(spatstat)
library(spatialkernel)
# Data
preston_crime <- readRDS("data/pcrime-spatstat.rds")
# Scan from 500m to 1000m in steps of 50m
bw_choice <- spseg(
preston_crime,
h = seq(500, 1000, by = 50),
opt = 1)
summary(bw_choice)
# Plot the results and highlight the best bandwidth
plotcv(bw_choice); abline(v = bw_choice$hcv, lty = 2, col = "red")
# Print the best bandwidth
print(bw_choice$hcv)
summary(bw_choice)
# Print the best bandwidth
# The `hcv` element has the value of the best bandwidth.
print(bw_choice$hcv)
# Print the best bandwidth
# The `hcv` element has the value of the best bandwidth.
print(bw_choice$hcv)
# Print the best bandwidth
# The `hcv` element has the value of the best bandwidth.
bandwidth = print(bw_choice$hcv)
# Print the best bandwidth
# The `hcv` element has the value of the best bandwidth.
print(bw_choice$hcv)
bandwidth = print(bw_choice$hcv)
# Set the correct bandwidth and run for 10 simulations only
seg10 <- spseg(
pts = preston_crime,
h = bandwidth,
opt = 3,
ntest = 10,
proc = FALSE)
# Plot the segregation map for violent crime
plotmc(seg10, "Violent crime")
# Plot the segregation map for violent crime
plotmc(seg10, "Non-violent crime")
# Plot the segregation map for violent crime
plotmc(seg10, "n-violent crime")
# Plot the segregation map for violent crime
plotmc(seg10, "Non-violent crime")
# Plot the segregation map for violent crime
plotmc(seg10, "Violent crime")
# You can modify the script above to run 1000 simulations if you have 20 mins of time. Alternatively, load the 'seg' object from data/.
seg <- readRDS("data/seg.rds")
# Plot seg, the result of running 1000 simulations
plotmc(seg, "Violent crime")
# Inspect the structure of the spatial segregation object
str(seg)
# Get the number of columns in the data so we can rearrange to a grid
ncol <- length(seg$gridx)
ncol
# Get the number of columns in the data so we can rearrange to a grid
ncol <- length(seg$gridy)
ncol # number of columns
# Rearrange the probability column into a grid
prob_violent <- list(x = seg$gridx,
y = seg$gridy,
z = matrix(seg$p[, "Violent crime"],
ncol = ncol))
# You have basically georeferenced the image within data's coordinates
image(prob_violent)
# Rearrange the p-values, but choose a p-value threshold
p_value <- list(x = seg$gridx,
y = seg$gridy,
z = matrix(seg$stpvalue[, "Violent crime"]< 0.05,
ncol = ncol))
image(p_value)
# Create a mapping function
segmap <- function(prob_list, pv_list, low, high){
# background map
library(raster)
preston_osm <- readRDS("data/osm_preston_gray.rds")
plotRGB(preston_osm)
# p-value areas
image(pv_list,
col = c("#00000000", "#FF808080"), add = TRUE)
# probability contours
contour(prob_list,
levels = c(low, high),
col = c("#206020", "red"),
labels = c("Low", "High"),
add = TRUE)
# boundary window
plot(Window(preston_crime), add = TRUE)
}
image(p_value)
prop_violent
prob_violent
p_value
# Map the probability and p-value
segmap(prob_violent, p_value, 0.05, 0.15)
# You have basically georeferenced the image within data's coordinates
image(prob_violent)
# Map the probability and p-value
segmap(prob_violent, p_value, 0.05, 0.15)
image(p_value)
# You have basically georeferenced the image within data's coordinates
image(prob_violent)
